1- Criar um secret com permissões para dar um pull da imagem de um repositório privado no cluster

Assim como foi feito no video demo, a aplicação foi subida no amazon ECR para que os mesmos comandos fossem aplicados, porém com as credenciais do meu repositório criado. 

- login no docker repositório

aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 808826729764.dkr.ecr.us-east-1.amazonaws.com

Apesar de ter feito o login, o minikube não tem acesso as credenciais armanezadas no meu pc. Portanto, um método diferente foi usado para logar no repositório, via minikube

Primeiro, eu extraio o token de login usando apenas uma parte do código:

aws ecr get-login-password

Agora, será usada uma conexão ssh no minikube

minikube ssh

Será usado o comando docker login, porém ao invés da senha, usaremos o token do passo anterior, e o endereço do ECR

docker login --username AWS -p eyJwYXlsb2FkIjoiNWQxU0E4blQwYk5wRDVWZ2FYeEh0ei92WUo4dmo5VUxqRGVyMU1EYmpXbVY1WlRYWnZDOU1ETlZNNjNEMkpJWlpoYkdwOEc0ZTZjdk13enU2cTNXWmE3TlFvTitQazJkQUNyUDhrcG5SeWRDUCtVb0cyL0pxU05LQUZQakxMY21vK0VMb2t2UE5xTlZlR2pVR0ZsL0ZnU1FjUXNnaXY2blA1QnZFYXlNU0puUUlkQTRxRnZ6UW1GaHNZZXlaQXFiZ3VMS1VkQ2lDMGxia2s3bHBMZHVLd0hyc1hPU3dzM2ovbkRYcWxUbnVZYks1ZmU3b0dBL1A1dmlydHIzVWNSNEtyYUNtL3U1TUM4cHZqcmxzVjFPWmkzd1dMbmVvelVDcldMMEw4dkNhamV5K01mQ3RsZUpuQTdsUjlhWDM4Z1VnbFBQRit1T0JmU3JPT3R0cEdQckNsM2ZzYlZzWG1kMnp1bmRBVmdGVXk4MlB4dFlMbExrRFFqY2pFeVdDRytDRmwxenJpVjRaUGh6Z3ZPamZFOW4yTzhQc2hzZDRTdmhSZ0xtUUliejJjeW9aV2RvZ2F1SGU5ZCtlWUhwTEdheUdRa1pTQi9veTdGU0w5VVJPRWd5ZUN2Qi96R3JSRzdqdnFxNkg5bkVPZ2wwNDdzdDR0dlRLbjQwV3QwTVRyUmE1elRneGZ5UnBYNXJHckhGQS95LzBLVjVvK3g0Y09KQ1QrQTFnMXVXMFg1c1oyYVZyOG9SVkgzL2lJMTNTRzRHcW5JNk9vTkFkZGZ4Y3ZEeGJSMzBDQ3AzTlNVTVFRbEtrVjVQaCt1NFJFQTZhSHMwK1VVOHJJaWFhSEFTOGJmeis5dXA0cytnNGRsYW9PMWt5cWlMRUdTQlZOWHhyWUlJdEtPazZwQ0tBTDdZOERMakhwU0NuUnFqNUdXL0NuUkdjdTdVSmpFZzJ4cW1tUEJUWXNuR1QramZQUXIwVnlVZ3ZiTThXb0lUN1ZVL3F0QmoySHFDV1N5TEpFdW5zb0pPOHZkeXNvQVJVM3ZhOS9UUk40VnFDcElNMmVKeHJPR3MzaDdvQVQzQkxQOEVCK3g0b2FkdGJOeEdVaWpabjZ4MnovRmMwdmdONE5QNGlUZU5PL1ZPd3oyK3Z2Qm1UWnp1OGs1MDA2cFczSnY1VHFpb1hDODNNaDlCV1gxZmFFeTJjL3FwUjZFS0ZSZkdGZVEzR0pZVDJ6TkRYV1l2S3Q5RmJXTlpZd0VCWmhQWmg3dU5VSmFPai84ZVJBQlg0b29UV3hqNmJLcVllM3NLZjdHbmhhSGp6akpOMXBFWlhNeVR2ZlIxdURlTUhvWnlUWk8wL3ZYc2Z2b2JXYjFibE1ZNGdVaGVtTVN4a3NDTiIsImRhdGFrZXkiOiJBUUVCQUhod20wWWFJU0plUnRKbTVuMUc2dXFlZWtYdW9YWFBlNVVGY2U5UnE4LzE0d0FBQUg0d2ZBWUpLb1pJaHZjTkFRY0dvRzh3YlFJQkFEQm9CZ2txaGtpRzl3MEJCd0V3SGdZSllJWklBV1VEQkFFdU1CRUVESGVZUG53akhaNjJvbW5PVXdJQkVJQTdDSkpOVkVMYnBMZjR1eC80bWtwOUJDVFdhYzJYZEJPVTd1RjZMQ3FNUC90L0tLOEMxd285MXAwdlJNNHJ2dlMwYmF3ck5ieW5NZXk1Ym0wPSIsInZlcnNpb24iOiIyIiwidHlwZSI6IkRBVEFfS0VZIiwiZXhwaXJhdGlvbiI6MTczMDI1Njc4Nn0=
 808826729764.dkr.ecr.us-east-1.amazonaws.com
 
 Após a execução desse comando, foi gerado no minikube um .docker folder com o config.json que contém o token como credencial de acesso ao repositório, que será usado no secret.
 
 - Criar o secret (arquivo docker-secret.yaml)
 
 Foi criado um arquivo secret que contém o tipo dockerconfigjson. E o valor do atributo .dockerconfigjson será o conteúdo encriptado da base 64 do config.json file. Para fazer isso, esse arquivo foi copiado do Minikube para o host, para usa-lo no kubectl.
 
 minikube cp minikube:/home/docker/.docker/config.json /home/mauricio/.docker/config.json

O conteúdo do host foi substituido pelo do minikube, agora ela pode ser convertido para o formato base 64 e inserido no secret:

cat .docker/config.json | base64
 
Existe um outro método para criar o secret, por meio de um comando que cria um secret genérico e seta os valores já inserindo os valores corretos nos atributos, usando o .docker/config.json

kubectl create secret generic my-registry-key --from-file=.dockerconfigjson=.docker/config.json --type=kubernetes.io/dockerconfigjson

- Figura 1

Também é possível criar o secret com um único comando, colocando o secret como docker-registry type, e configurando o servidor, username e password diretamente.

kubectl create secret docker-registry my-registry-key-two \
--docker-server=https://808826729764.dkr.ecr.us-east-1.amazonaws.com \
--docker-username=AWS \
--docker-password=eyJwYXlsb2FkIjoiMGEwUFU4STk0SksvVCtYUmpNK2ZvWGJWaHd1MldXcnpQTmFIdG56aXNmSnQ4cFBadFIzRitRblJtZ2dnTjJxSkxXZTJRYUdHUlRxNFRKcHdpRkZmOXBybTNqWFpOQStYUFFTUDF6cXZSdW1lVmxQaEQxNHNYNjVhcERENEhWVnQvWDJkajRVd0NNenJQQm0zWlRXK1cyTWxTMjRXSDNQRnp1MUw5U0JmdFByZldEZkVWU011MHRqblJ4RUVmK0l1VWJic25BZHM5Nit6d0RyVnFLZVNqSCtQT1V0eTJxNWRGbFNBQzRCYnYraXNKdGhCMmR0dExiRnh4K2s3YXNVWi93K2NtbXc4V0M4RzdOVlpqUGpiT09XT2RPNE5mT3R3dU1xVGNYbWk3WmhwN2dWUTFJSURlY1ZwOWE5NXVzN1diT2pNTXFYWU0veWN1bmZzclZqZW16TFFvUHBhM1RaQWJnWmFLcy9FL1Brc2ZmcEpmQ2xFMUgvM0JYM1JWeitZS3VFL3FxUm95TzRIM3ZYU3dldXBjQVRNT1p0OXBUeUNsbEJvTTAxQUh0U3BWZUM2WGtVVnpqcWFrcGhEMEV3ekNDVHh3bysrekE4UkV4UE5KYXFnWjBtVXJDOUNRcmg0bWJSTVJtS3JkWnVibFh4WFpuRXlPalMrWFJuekZZTDFnaXZlMkNqRVhrMWZYR1NCbm03R2oreFdMUFIyczZMYlNtbDdxVC96bkVLYk5qck44anNUUjN5SEIxRm00QmprR1NVQW4wVSsrekl2SldvQTM3bmJWUm5HWm8wYzBidW9yRjQ3ZXRhWjRYbGtzRmRkSUN1M0grL3p5VWE5WDA2ZFZ6bVhOU3NFMHNtYlA1VkpVQXk4akkvbnFkTWJpSlVVQUJqZ1kzQnQxSXFmUENPNjdoMGtqY1JjK0l0RXpISUhFaHR4RDRmM0xlQjYzNDQ3S1luMDY2MEd2N0JmUXBPOGlvRHFicXNVa2lOTmxZWXZIV09YTkl4MzdlWkNYc3N2K3k3RXlEYUIvWHVKWkFKMUxWdXRRRTBrTXVMaE9HQWtEVG9ycmxpUlBoNlI4MCtKYiszb3k5NzJIWVV1UFgxUTN4bXRVbDh4UHBqcm9WMThIYkRNWVlLS2Y1V1I2aEVLVXRhTkcvWWI4OGowaUMreFFWK202NU1DRm4xaGFKNlRiMnZHN24yaStjOHp2NTZNVUlFNkNZamk5QnRqb0lCanQ0R3hvbEplUTZZaVNLU2pDemNaanJ0NU5IVXRQaUdZeE56WWxjeVZrMytoU1g1NlZQR2RUcVRFcEFPQTZrMFFmNEFTTjBGRmNDUDZGV2YzdWkxZ2xGUXR0ZHFTa3hid3UrOHN4cTNkTVZjSiIsImRhdGFrZXkiOiJBUUVCQUhod20wWWFJU0plUnRKbTVuMUc2dXFlZWtYdW9YWFBlNVVGY2U5UnE4LzE0d0FBQUg0d2ZBWUpLb1pJaHZjTkFRY0dvRzh3YlFJQkFEQm9CZ2txaGtpRzl3MEJCd0V3SGdZSllJWklBV1VEQkFFdU1CRUVEQUlLeXhudFE4NFJuUDRrYUFJQkVJQTcrbldvelZNa2MycXNwcnc2Q1AwS2I0d1c4WjRXMzJIYUVNczZNSTh6b2FJZHNQTWxnV0FOMUI1RnBMZmROcFZ0c0dGZUJzaFRpT1IvS0h3PSIsInZlcnNpb24iOiIyIiwidHlwZSI6IkRBVEFfS0VZIiwiZXhwaXJhdGlvbiI6MTczMDI1ODYzMn0=

Usando a primeira abordagem, tem uma vantagem de poder configurar o .docker/config.json para ter acesso a multiplos repositórios que podem ser necessários para serem conectados ao cluster. A segunda abordagem permite acesso a apenas um repositório.

- Criar o deployment (arquivo my-app-deployment.yaml)

O deployment usado nesse passo contém o mínimo necessário para subir o pod. Dentro da seção do container, em image, ele deve ser configurado com a uri da imagem do repositório. E também foi usado um atributo imagePullPolicy para forçar o deployment a fazer o pull do repositório do ECR, mesmo que essa imagem exista localmente. Além disso, o arquivo deve ser configurado para usar o secret criado previamente, com o atributo imagePullSecrets.

Por meio do comando describe, podemos ver que a imagem foi pulled com sucesso

- Imagem 2

Para que esse método funcione, o secret deve estar no mesmo namespace do deployment




